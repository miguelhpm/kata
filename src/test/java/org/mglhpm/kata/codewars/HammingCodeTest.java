package org.mglhpm.kata.codewars;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import org.junit.Test;

public class HammingCodeTest {
	
	//URL: https://www.codewars.com/kata/5ef9ca8b76be6d001d5e1c3e/train/java

	private HammingCode objTF = new HammingCode();

	// Encode

	@Test
	public void testEncodeHey() {
		assertEquals("Encode hey", "000111111000111000000000000111111000000111000111000111111111111000000111",
				objTF.encode("hey"));
	}

	@Test
	public void testEncodeSentence() {
		assertEquals("Should work with longer word",
				
				objTF.encode("The Sensei told me that i can do this kata"));
	}

	@Test
	public void testEncodeWithNumber() {
		assertEquals("Should work with numbers",
				"000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000",
				objTF.encode("T3st"));
	}

	@Test
	public void testEncodeWithCharacterSpecial() {
		assertEquals("Should work with special characters",
				"000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111",
				objTF.encode("T?st!%"));
	}

	@Test
	public void testEncodeWithCharacterSpecialMajor() {
		assertEquals("Should work with special characters majot", "111000111000111111111000111000111111000000000000",
				objTF.encode("®°"));
	}
	
	// Decode

	@Test
	  public void test_decode_function() {
	    assertEquals("Should work with short word", "hey", objTF.decode("100111111000111001000010000111111000000111001111000111110110111000010111"));
	    assertEquals("Should work with longer word", "The Sensei told me that i can do this kata", objTF.decode
	    assertEquals("Should work with numbers", "T3st", objTF.decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"));
	    assertEquals("Should work with special characters", "T?st!%", objTF.decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"));  
	  }
	
	@Test
	public void demo() {
		String cadena1 = "abcdefg";
		String cadena2 = "AABBCCDDEEFFGG";
		
		String cadena3 = cadena1.chars().mapToObj(i -> String.valueOf( (char) i ).toUpperCase()).map(j -> j.concat(j)).collect(Collectors.joining(""));
		
		//System.out.println(cadena3);
		
		assertEquals(cadena2, cadena3);
	} 

}
